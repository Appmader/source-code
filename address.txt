package jvproj2;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;

class GROUP 
{
	final int MAX_address = 100;
	String group;
	String[] name = new String[MAX_address];
	String[] phone = new String[MAX_address];
	int current_address = 0;
	
	GROUP(String g , String n , String p)
	{
		group = g;
		name[current_address] = n;
		phone[current_address] = p;
		current_address++;
	}
	void Add(String n , String p)
	{
		name[current_address] = n;
		phone[current_address] = p;
		current_address++;
	}
	
	String getGroup()
	{
		return group;
	}
	String getName(int num)
	{
		return name[num];
	}
	String getPhone(int num)
	{
		return phone[num];
	}
}


public class GUIAddressBook extends JFrame
{
	JPanel InputPanel;
	JPanel OutputPanel;
	JPanel TitlePanel;
	JPanel ButtonPanel;
	
	JLabel setName;
	JLabel setPhone;
	JLabel setGroup;
	
	JTextField Name;
	JTextField Phone;
	JTextField Group;
	
	JLabel Text;
	JButton Apply;
	JButton Delete;
	JButton GDelete;
	JButton Nsearch;
	JButton Gsearch;
	JButton Asearch;
	JTextArea List;
	String g = new String();
	String n = new String();
	String p = new String();
	Vector<GROUP> address = new Vector<GROUP>(10);
	
	GUIAddressBook()
	{
		Container contentPane = getContentPane();
		contentPane.setLayout(new BorderLayout());
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		//set contentPane.
		
		InputPanel = new JPanel();
		ButtonPanel = new JPanel();
		OutputPanel = new JPanel();
		TitlePanel = new JPanel();
		//add Panel.
		
		contentPane.add(InputPanel, BorderLayout.WEST);
		contentPane.add(OutputPanel, BorderLayout.CENTER);
		contentPane.add(TitlePanel, BorderLayout.NORTH);
		contentPane.add(ButtonPanel, BorderLayout.SOUTH);
		//Add Panel in contentPane.
		
		InputPanel.setLayout(new GridLayout(4,2));
		TitlePanel.setLayout(new FlowLayout());
		ButtonPanel.setLayout(new FlowLayout());
		//set Layout in JPanel.
		
		Name = new JTextField();
		Phone = new JTextField();
		Group = new JTextField();
		Apply = new JButton("APPLY");
		Delete = new JButton("DELETE");
		GDelete = new JButton("GDELETE");
		Nsearch = new JButton("NS");
		Gsearch = new JButton("GS");
		Asearch = new JButton("AS");
		
		setName = new JLabel("NAME :");
		setPhone = new JLabel("PHONE :");
		setGroup = new JLabel("GROUP :");
		List = new JTextArea(7, 25);
		//set components
		
		InputPanel.add(setName);
		InputPanel.add(Name);
		InputPanel.add(setPhone);
		InputPanel.add(Phone);
		InputPanel.add(setGroup);
		InputPanel.add(Group);
		ButtonPanel.add(Apply);
		ButtonPanel.add(Delete);
		ButtonPanel.add(GDelete);
		ButtonPanel.add(Gsearch);
		ButtonPanel.add(Nsearch);
		ButtonPanel.add(Asearch);
		//add components in Panel.
		
		List.setEditable(false);
		JScrollPane scroll = new JScrollPane(List);
		OutputPanel.add(scroll);
		//Add JTextArea in OutputPanel.
		Text = new JLabel("Address Management");
		TitlePanel.setBackground(new Color(0,0,255));
		Text.setForeground(new Color(255,255,255));
		TitlePanel.add(Text);
		
		Event event = new Event();
		Apply.addMouseListener(event);
		Delete.addMouseListener(event);
		GDelete.addMouseListener(event);
		Gsearch.addMouseListener(event);
		Nsearch.addMouseListener(event);
		Asearch.addMouseListener(event);
		
		setTitle("Management of Address");
		setSize(450,250);
		setVisible(true);
		//setting
	}
	
	class Event extends MouseAdapter
	{
		public void mouseClicked(MouseEvent e)
		{
			JButton button = (JButton)e.getSource();
			String check = button.getText();
			GROUP book;
			g = (Group.getText()).trim();
			n = (Name.getText()).trim();
			p = (Phone.getText()).trim();
			switch(check)
			{
				case "APPLY":
					if(g.equals("") || n.equals("") || p.equals(""))
					{
						return;
					}
					else
					{
						for(int i = 0; i <= address.size(); i++)
						{
							book = address.get(i);
							if(book.getGroup() == g)
							{
								if(book.current_address == book.MAX_address)
								{
									return;
								}
								else
								{
									List.setText("");
									book.Add(n,p);
									Group.setText("");
									Name.setText("");
									Phone.setText("");
									List.append("Address Applied");
									break;
								}
							}
							else
							{
								List.setText("");
								Group.setText("");
								Name.setText("");
								Phone.setText("");
								address.add(new GROUP(g,n,p));
								List.append("New Group Applied");
								List.setCaretPosition(List.getDocument().getLength());
								break;	
							}
						}
					}
					break;
					
				case "DELETE":
					List.setText("");
					for(int i = 0; i <= address.size(); i++)
					{
						book = address.get(i);
						if(book.getGroup() == g)
						{
							for(int j = 0; j < book.current_address; j++)
							{
								if(book.getName(j) == n && book.getPhone(j) == p)
								{
									for(int s = j+1; s < book.current_address; s++)
									{
										book.name[s-1] = book.name[s];
										book.phone[s-1] = book.phone[s];
									}
									book.current_address--;
								}
							}
							List.append("Delete Address");
							break;
						}
					}
					break;
					
				case "GDELETE":
					List.setText("");
					for(int i = 0; i <= address.size(); i++)
					{
						book = address.get(i);
						if(book.getGroup() == g)
						{
							address.remove(i);
							List.setText("");
							List.append("Delete group");
							break;
						}
					}
					break;
					
				case "GS":
					List.setText("");
					for(int i = 0; i < address.size(); i++)
					{
						book = address.get(i);
						if(book.getGroup() == g)
						{
							List.append(book.getGroup() + "\n");
							for(int j = 0; j < book.current_address; j++)
							{
								List.append("\t" + "NAME : " + book.getName(j) + " PHONE : " + book.getPhone(j) + "\n");
							}
							break;
						}
					}
					break;
					
				case "NS":
					List.setText("");
					for(int i = 0; i < address.size(); i++)
					{
						book = address.get(i);
						for(int j = 0; j < book.current_address; j++)
						{
							if(book.getName(j) == n)
							{
								List.append(book.getGroup() + "\n");
								List.append("\t" + "NAME : " + book.getName(j) + " PHONE : " + book.getPhone(j) + "\n");
							}
						}
					}
					break;
					
				case "AS":
					List.setText("");
					for(int i = 0; i < address.size(); i++)
					{
						book = address.get(i);
						List.append(book.getGroup() + "\n");
						for(int j = 0; j < book.current_address; j++)
						{
							List.append("\t" + "NAME : " + book.getName(j) + " PHONE : " + book.getPhone(j) + "\n");
						}
					}
					break;
					
				default:
					List.setText("");
					List.append("Invaild Selection");
					break;	
			}
		}
	}
	public static void main(String[] args)
	{
		new GUIAddressBook();
	}
}